[{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://leonardo-bo.github.io/rgrids/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://leonardo-bo.github.io/rgrids/articles/df-matrices.html","id":"pilematrix","dir":"Articles","previous_headings":"","what":"pileMatrix()","title":"dataframes <==> matrices","text":"operations, covariance, return matrix result. Wanting represent covariance via ggplot2 can tricky don’t use auxiliary packages. One possibility use reshape2 package’s melt function, want part matrix additional operations upper.tri() similar required. pileMatrix() function simplifies operations; works similarly reshape2::melt() function, however, performing melt, allows easily choose parts interest matrix. define square test matrix Using pileMatrix() obtain dataframe three columns, first two indicate row column matrix, third indicates value matrix element possible part matrix stack choosing : \"full\": whole matrix (default), \"u\": upper triangular matrix without diagonal, \"ud\": upper trinagular matrix diagonal, \"l\": lower triangular matrix without diagonal, \"ld\": lower triangular matrix diagonal, \"d\": diagonal","code":"(mat1 <- matrix(1:64, nrow = 8, byrow = TRUE)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40 #> [6,]   41   42   43   44   45   46   47   48 #> [7,]   49   50   51   52   53   54   55   56 #> [8,]   57   58   59   60   61   62   63   64 head(pileMatrix(mat1)) #>   row col value #> 1   1   1     1 #> 2   2   1     9 #> 3   3   1    17 #> 4   4   1    25 #> 5   5   1    33 #> 6   6   1    41 head(pileMatrix(mat1, subset = \"u\")) #>   row col value #> 1   1   2     2 #> 2   1   3     3 #> 3   2   3    11 #> 4   1   4     4 #> 5   2   4    12 #> 6   3   4    20  pileMatrix(mat1, subset = \"d\") #>   row col value #> 1   1   1     1 #> 2   2   2    10 #> 3   3   3    19 #> 4   4   4    28 #> 5   5   5    37 #> 6   6   6    46 #> 7   7   7    55 #> 8   8   8    64"},{"path":"https://leonardo-bo.github.io/rgrids/articles/df-matrices.html","id":"gettriang","dir":"Articles","previous_headings":"","what":"getTriang()","title":"dataframes <==> matrices","text":"purpose getTriang() filter parts dataframe inside workflow. consider dataframe points calculate distances pairs points. define intermediate variables, can proceed way, including loop. let’s see proceed getTriang() merge() function returns possible pairs, distance point matter always zero furthermore distance points \\(- b\\) \\(b - \\), want discard repetitions. can getTriang() given number cells square matrix (fact dataframe using can seen square matrix) returns indices desired matrix elements; particular, can choose upper lower part matrix, without diagonal, main direction mirrored direction; moreover possible choose direction elements matrix reported (.e. increasing \\(x\\) (\"h\") \\(y\\) (\"v\") faster), total 16 possibilities. clarity calculate distances filter lower part without diagonal, perform fewer calculations better filter first.  Due R counts matrix elements set indices, see selected right part. need lower part, mirrored direction","code":"(df1 <- data.frame(x = runif(10), y = runif(10), index = 1:10)) #>            x          y index #> 1  0.3925798 0.45142936     1 #> 2  0.6789837 0.55658420     2 #> 3  0.6731213 0.69864169     3 #> 4  0.8718617 0.06834259     4 #> 5  0.2504526 0.73491926     5 #> 6  0.9693062 0.36119518     6 #> 7  0.2198829 0.17600445     7 #> 8  0.6469422 0.62971327     8 #> 9  0.3297866 0.18869608     9 #> 10 0.1463654 0.57821380    10  head(merge(x = df1, y = df1, by = NULL)) #>         x.x        y.x index.x       x.y       y.y index.y #> 1 0.3925798 0.45142936       1 0.3925798 0.4514294       1 #> 2 0.6789837 0.55658420       2 0.3925798 0.4514294       1 #> 3 0.6731213 0.69864169       3 0.3925798 0.4514294       1 #> 4 0.8718617 0.06834259       4 0.3925798 0.4514294       1 #> 5 0.2504526 0.73491926       5 0.3925798 0.4514294       1 #> 6 0.9693062 0.36119518       6 0.3925798 0.4514294       1 df_merge <- merge(x = df1, y = df1, by = NULL)  # calculate distance df_merge$distance <- sqrt((df_merge$x.x - df_merge$x.y)^2 + (df_merge$y.x - df_merge$y.y)^2)  # define lower triangular matrix index without diagonal lower_ndx <- getTriang(nrow(df_merge), diag = FALSE, part = \"lower\")  # filter df_merge df_merge_filter <- df_merge[lower_ndx, ]  # join dataframe to representation df_full <- data.frame(rbind(df_merge, df_merge_filter)) df_full$group <- c(rep(\"full\", nrow(df_merge)), rep(\"filter\", nrow(df_merge_filter)))  ggplot(df_full) +    geom_tile(aes(x = index.x, y = index.y, fill = distance)) +    facet_wrap(~group) # define mirrored lower triangular matrix index without diagonal lower_mir_ndx <- getTriang(nrow(df_merge), diag = FALSE, part = \"lower\", mirror = TRUE)  # filter df_merge df_merge_filter <- df_merge[lower_mir_ndx, ]  # join dataframe to representation df_full <- data.frame(rbind(df_merge, df_merge_filter)) df_full$group <- c(rep(\"full\", nrow(df_merge)), rep(\"filter\", nrow(df_merge_filter)))  ggplot(df_full) +    geom_tile(aes(x = index.x, y = index.y, fill = distance)) +    facet_wrap(~group)"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids1d.html","id":"boxplot","dir":"Articles","previous_headings":"","what":"Boxplot","title":"1D grids","text":"density analysis one dimension can performed points lying line suitably divided segments, , different \\(x\\) \\(y = 0\\), set points plane divided strips. consider plane divided strips, grouping points can shown boxplot. Let’s see proceed.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids1d.html","id":"define-dataframe-of-points","dir":"Articles","previous_headings":"Boxplot","what":"Define dataframe of points","title":"1D grids","text":"First define dataframe random points","code":"set.seed(1)      df_points <- data.frame(x = c(rnorm(n = 5000, mean = -4),                                rnorm(n = 5000, mean = 4)),                          y = c(rnorm(n = 5000, mean = 1),                                rnorm(n = 5000, mean = -1)) )       ggplot(df_points) +    geom_point(aes(x, y), color = \"steelblue4\", size = 0.1)"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids1d.html","id":"make-1d-grid","dir":"Articles","previous_headings":"Boxplot","what":"Make 1D grid","title":"1D grids","text":"one-dimensional grid built. one-dimensional grid defined lower bound, upper bound, number vertical stripes. criterion defining grid boundaries number strips varies time time based data type analysis.","code":"# check the extreme values of the points along x min(df_points$x) #> [1] -7.6713 max(df_points$x) #> [1] 7.624361   # define boundaries of grid (xmin <- floor(min(df_points$x))) #> [1] -8 (xmax <- ceiling(max(df_points$x))) #> [1] 8     # define the grid grid1d <- makeGrid1d(xmin = xmin, xmax = xmax, xcell = 16) grid1d #> class        : Grid1d #> dimensions   : xcell = 16 #> range        : xmin = -8, xmax = 8"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids1d.html","id":"get-the-boxplot","dir":"Articles","previous_headings":"Boxplot","what":"Get the boxplot","title":"1D grids","text":"Finally get boxplot using getBoxplot() function. getBoxplot() function takes input object class Grid1d dataframe points. input dataframe two columns, first two automatically selected. getBoxplot() assigns x value points within strip. xbp column factor.","code":"df_boxplot <- getBoxplot(grid1d, df_points)      head(df_boxplot) #>    xbp         x           y #> 1 -4.5 -4.626454  0.19566840 #> 2 -3.5 -3.816357 -0.05652565 #> 3 -4.5 -4.835629 -0.03539578 #> 4 -2.5 -2.404719 -0.18556035 #> 5 -3.5 -3.670492  0.49956049 #> 6 -4.5 -4.820468  0.47501129 ggplot(df_boxplot)+   geom_boxplot(aes(x = xbp, y = y), fill = \"steelblue3\", color = \"grey40\") +    labs(x = \"x\") +    scale_x_discrete(breaks = levels(df_boxplot$xbp), drop = FALSE)"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids1d.html","id":"histogram","dir":"Articles","previous_headings":"","what":"Histogram","title":"1D grids","text":"functions can generate histogram provide information . However, histogram can also obtained using getCell() getCounts() function rgrids. getCell() function assigns point plane respective strip, counting strips left right, getCounts() function counts many points fall within strip returns dataframe two columns: center bin (.e. center strip) count.","code":"df_points$grid_index <- getCell(grid1d, df_points) #> Warning in getCell(grid1d, df_points): data.frame passed to a Grid1d object; #> only first column was selected head(df_points) #>           x           y grid_index #> 1 -4.626454  0.19566840          4 #> 2 -3.816357 -0.05652565          5 #> 3 -4.835629 -0.03539578          4 #> 4 -2.404719 -0.18556035          6 #> 5 -3.670492  0.49956049          5 #> 6 -4.820468  0.47501129          4  df_hist <- getCounts(grid1d, df_points$grid_index) head(df_hist) #>      x counts #> 1 -7.5      9 #> 2 -6.5    132 #> 3 -5.5    683 #> 4 -4.5   1715 #> 5 -3.5   1634 #> 6 -2.5    695 ggplot(df_hist) +    geom_col(aes(x, counts/sum(counts)), fill = \"steelblue4\") +    labs(y = \"frequency\")"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids2d.html","id":"define-dataframe-of-points","dir":"Articles","previous_headings":"","what":"Define dataframe of points","title":"2D grids","text":"First, set random points generated","code":"set.seed(1)  df_points <- data.frame(x = c(rnorm(n = 50000, mean = -2),                                rnorm(n = 50000, mean = 2)),                          y = c(rnorm(n = 50000, mean = 1),                                rnorm(n = 50000, mean = -1)) )   head(df_points) #>            x         y #> 1 -2.6264538 1.7914415 #> 2 -1.8163567 1.3921679 #> 3 -2.8356286 0.5273330 #> 4 -0.4047192 0.5420483 #> 5 -1.6704922 0.8318681 #> 6 -2.8204684 1.5856737  ggplot(df_points) +    geom_point(aes(x, y), color = \"steelblue4\", size = 0.1)"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids2d.html","id":"make-2d-grid","dir":"Articles","previous_headings":"","what":"Make 2D grid","title":"2D grids","text":"two-dimensional grid built. two-dimensional grid defined lower upper bound along \\(x\\) \\(y\\), number cell along \\(x\\) \\(y\\). addition extremes number cells, makeGrid2d() takes input additional parameter numbers elements grid increasing \\(x\\) (h) \\(y\\) (v) faster: cases count starts bottom left.","code":"# check the extreme values of the points along x min(df_points$x) #> [1] -6.302781 max(df_points$x) #> [1] 6.313621  # check the extreme values of the points along y min(df_points$y) #> [1] -5.218131 max(df_points$y) #> [1] 5.244194  # define boundaries of grid (xmin <- floor(min(df_points$x))) #> [1] -7 (xmax <- ceiling(max(df_points$x))) #> [1] 7 (ymin <- floor(min(df_points$y))) #> [1] -6 (ymax <- ceiling(max(df_points$y))) #> [1] 6  # define the grid grid2d <- makeGrid2d(             xmin = xmin, xmax = xmax, xcell = 50,             ymin = ymin, ymax = ymax, ycell = 50           ) grid2d #> class      : Grid2d #> dimensions : xcell = 50, ycell = 50, ncell = 2500 #> range      : xmin = -7, xmax = 7 #>              ymin = -6, ymax = 6 #> by         : h, count starts from xmin, ymin (bottom-left)  #>              and x increase faster by = \"h\"      by = \"v\" 7 8 9         3 6 9 4 5 6         2 5 8 1 2 3         1 4 7"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids2d.html","id":"assign-points-to-cells","dir":"Articles","previous_headings":"","what":"Assign points to cells","title":"2D grids","text":"point dataframe assigned respective grid cell via getCell(). getCell() function takes input object Grid2d class matrix dataframe points; passed matrix dataframe two columns, first two automatically selected. values grid_index column range 1 2500, number elements grid.","code":"grid_index <- getCell(grid2d, df_points) df_points$grid_index <- grid_index  head(df_points) #>            x         y grid_index #> 1 -2.6264538 1.7914415       1616 #> 2 -1.8163567 1.3921679       1519 #> 3 -2.8356286 0.5273330       1365 #> 4 -0.4047192 0.5420483       1374 #> 5 -1.6704922 0.8318681       1420 #> 6 -2.8204684 1.5856737       1565"},{"path":"https://leonardo-bo.github.io/rgrids/articles/grids2d.html","id":"count-the-points","dir":"Articles","previous_headings":"","what":"Count the points","title":"2D grids","text":"get occurrence points cell just manipulate previous result get grid coordinates. facilitate operation, use getCounts() function takes grid2d grid_index input returns dataframe three columns: first two represent coordinates element grid third represents occurrence points cell Finally, grid represented","code":"df_grid <- getCounts(grid2d, grid_index)  head(df_grid) #>       x     y counts #> 1 -6.86 -5.88      0 #> 2 -6.58 -5.88      0 #> 3 -6.30 -5.88      0 #> 4 -6.02 -5.88      0 #> 5 -5.74 -5.88      0 #> 6 -5.46 -5.88      0 ggplot(df_grid) +    geom_raster(aes(x, y, fill = counts/nrow(df_grid))) +    theme(legend.title = element_blank())"},{"path":"https://leonardo-bo.github.io/rgrids/articles/matrices.html","id":"basic-operations-mean-max-min","dir":"Articles","previous_headings":"","what":"Basic operations: mean, max, min","title":"Submatrices and lists of matrices","text":"Given matrix, may useful consider blocks observe essential characteristics block. can use blockmean(), blockmax() blockmin() functions take matrix block size input return average, maximum minimum values block respectively. important blocks fill entire matrix, , total number rows columns multiple number rows columns block. case, example, blocks size c(2,4), c(4,2) good. possible work rectangular blocks, often useful work square blocks. example define 2x2 block apply functions: block square sufficient insert one dimension, rectangular block vector c(nrow_block, ncol_block) must passed.","code":"(mat1 <- matrix(1:64, nrow = 8, byrow = TRUE)) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40 #> [6,]   41   42   43   44   45   46   47   48 #> [7,]   49   50   51   52   53   54   55   56 #> [8,]   57   58   59   60   61   62   63   64 blockmean(mat1, 2) #>      [,1] [,2] [,3] [,4] #> [1,]  5.5  7.5  9.5 11.5 #> [2,] 21.5 23.5 25.5 27.5 #> [3,] 37.5 39.5 41.5 43.5 #> [4,] 53.5 55.5 57.5 59.5  blockmax(mat1, 2) #>      [,1] [,2] [,3] [,4] #> [1,]   10   12   14   16 #> [2,]   26   28   30   32 #> [3,]   42   44   46   48 #> [4,]   58   60   62   64  blockmin(mat1, 2) #>      [,1] [,2] [,3] [,4] #> [1,]    1    3    5    7 #> [2,]   17   19   21   23 #> [3,]   33   35   37   39 #> [4,]   49   51   53   55"},{"path":"https://leonardo-bo.github.io/rgrids/articles/matrices.html","id":"lists-of-submatrices","dir":"Articles","previous_headings":"Basic operations: mean, max, min","what":"Lists of submatrices","title":"Submatrices and lists of matrices","text":"situations may necessary perform complex operations blocks. Suppose want multiply block different integer. convenient control block. can collect submatrices one list using blocklist() function. Like previous functions, blocklist() takes matrix size block input. element list can accessed double square bracket: list_matrix[[]]; however, often operations lists possible avoid access element individually thanks lapply function. multiply matrix list different number: first 4, second 9, third 16 fourth 25.","code":"(list_matrix <- blocklist(mat1, 4)) #> $`1` #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    9   10   11   12 #> [3,]   17   18   19   20 #> [4,]   25   26   27   28 #>  #> $`2` #>      [,1] [,2] [,3] [,4] #> [1,]    5    6    7    8 #> [2,]   13   14   15   16 #> [3,]   21   22   23   24 #> [4,]   29   30   31   32 #>  #> $`3` #>      [,1] [,2] [,3] [,4] #> [1,]   33   34   35   36 #> [2,]   41   42   43   44 #> [3,]   49   50   51   52 #> [4,]   57   58   59   60 #>  #> $`4` #>      [,1] [,2] [,3] [,4] #> [1,]   37   38   39   40 #> [2,]   45   46   47   48 #> [3,]   53   54   55   56 #> [4,]   61   62   63   64 lapply(1:4, function(i, l, v) l[[i]] * v[[i]], list_matrix, c(4, 9, 16, 25)) #> [[1]] #>      [,1] [,2] [,3] [,4] #> [1,]    4    8   12   16 #> [2,]   36   40   44   48 #> [3,]   68   72   76   80 #> [4,]  100  104  108  112 #>  #> [[2]] #>      [,1] [,2] [,3] [,4] #> [1,]   45   54   63   72 #> [2,]  117  126  135  144 #> [3,]  189  198  207  216 #> [4,]  261  270  279  288 #>  #> [[3]] #>      [,1] [,2] [,3] [,4] #> [1,]  528  544  560  576 #> [2,]  656  672  688  704 #> [3,]  784  800  816  832 #> [4,]  912  928  944  960 #>  #> [[4]] #>      [,1] [,2] [,3] [,4] #> [1,]  925  950  975 1000 #> [2,] 1125 1150 1175 1200 #> [3,] 1325 1350 1375 1400 #> [4,] 1525 1550 1575 1600"},{"path":"https://leonardo-bo.github.io/rgrids/articles/matrices.html","id":"dblocklist","dir":"Articles","previous_headings":"Basic operations: mean, max, min > Lists of submatrices","what":"dblocklist","title":"Submatrices and lists of matrices","text":"block diagonal matrix can importante -diagonal blocks. can collect diagonal blocks list using dblocklist() function analogous blocklist(). trick: blocks must fill diagonal. mathematically translates fact ratio number rows matrix number rows block must equal ratio number columns matrix number columns block. Example: 16x8 matrix dblocklist() accepts 8x4, 4x2 blocks.","code":"dblocklist(mat1, 2) #> $`1` #>      [,1] [,2] #> [1,]    1    2 #> [2,]    9   10 #>  #> $`2` #>      [,1] [,2] #> [1,]   19   20 #> [2,]   27   28 #>  #> $`3` #>      [,1] [,2] #> [1,]   37   38 #> [2,]   45   46 #>  #> $`4` #>      [,1] [,2] #> [1,]   55   56 #> [2,]   63   64"},{"path":"https://leonardo-bo.github.io/rgrids/articles/matrices.html","id":"from-list-of-matrices-to-single-matrix","dir":"Articles","previous_headings":"","what":"From list of matrices to single matrix","title":"Submatrices and lists of matrices","text":"Suppose need calculate mean distance time pairs two sets points. convenience use list_matrix: matrix \\(k\\) list set distances time \\(t_k\\). meanMatrix() function returns mean element \\((, j)\\) matrix Similarly, sumMatrix() dotMatrix() functions return sum product element \\((, j)\\) matrix list","code":"meanMatrix(list_matrix) #>      [,1] [,2] [,3] [,4] #> [1,]   19   20   21   22 #> [2,]   27   28   29   30 #> [3,]   35   36   37   38 #> [4,]   43   44   45   46 sumMatrix(list_matrix) #>      [,1] [,2] [,3] [,4] #> [1,]   76   80   84   88 #> [2,]  108  112  116  120 #> [3,]  140  144  148  152 #> [4,]  172  176  180  184  dotMatrix(list_matrix) #>         [,1]    [,2]    [,3]    [,4] #> [1,]    6105   15504   28665   46080 #> [2,]  215865  270480  333465  405504 #> [3,]  927129 1069200 1225785 1397760 #> [4,] 2520825 2804880 3111129 3440640"},{"path":"https://leonardo-bo.github.io/rgrids/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Leonardo Bò. Author, maintainer.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bò L (2023). rgrids: Manage grids lattices. https://github.com/Leonardo-Bo/rgrids, https://leonardo-bo.github.io/rgrids/.","code":"@Manual{,   title = {rgrids: Manage grids and lattices},   author = {Leonardo Bò},   year = {2023},   note = {https://github.com/Leonardo-Bo/rgrids, https://leonardo-bo.github.io/rgrids/}, }"},{"path":[]},{"path":[]},{"path":"https://leonardo-bo.github.io/rgrids/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Manage grids and lattices","text":"rgrids R package allows work consistently grids matrices.rgrids facilitates density analysis 1D, 2D 3D. also possible deal block matrices perform operations lists matrices. developments concern operations first neighbors general matrix elements. rgrids mainly developed R, uses C++ language increase performance use less memory.","code":""},{"path":[]},{"path":"https://leonardo-bo.github.io/rgrids/index.html","id":"installation-and-update","dir":"","previous_headings":"","what":"Installation and update","title":"Manage grids and lattices","text":"rgrids hasn’t released CRAN yet, can install directly repository already installed package, can check new version update ","code":"devtools::install_github(\"Leonardo-Bo/rgrids\") devtools::update_packages(\"rgrids\")"},{"path":[]},{"path":"https://leonardo-bo.github.io/rgrids/index.html","id":"overview-of-functions","dir":"","previous_headings":"","what":"Overview of functions","title":"Manage grids and lattices","text":"purpose rgrids collect large number functions work coherent way solve recurring problems grids matrices. list functions currently available functions operate mainly grids : makeGrid1d(): creates 1D grid object, .e. divides plane strips straight line makeGrid2d(): creates 2D grid object, .e. divides plane rectangles makeGrid3d(): creates 2D grid object, .e. divides space parallelepipeds getBoxplot(): 1D grid associates y values within strip x getCell(): associates point 1D, 2D 3D array respective strip, rectangle parallelepiped getCounts(): generates dataframe three columns: coordinates cell grid number elements fall inside cell functions operate mainly block matrices : blockmax(): given matrix size block, returns new matrix containing max block blockmin(): given matrix size block, returns new matrix containing min block blockmean(): given matrix size block, returns new matrix containing mean block blocklist(): given matrix size block, returns list containing submatrices made blocks dblocklist(): given matrix size block, returns list diagonal submatrices made blocks meanMatrix(): given list matrix, returns single matrix element (, j) average corresponding elements (, j) matrices list sumMatrix(): given list matrix, returns single matrix element (, j) sum corresponding elements (, j) matrices list dotMatrix(): given list matrix, returns single matrix element (, j) product corresponding elements (, j) matrices list functions operate rows columns matrix : colMax(): given matrix, returns max column colMin(): given matrix, returns min column rowMax(): given matrix, returns max row rowMin(): given matrix, returns min row functions connect matrices dataframes : pileMatrix(): transforms matrix dataframe three columns: row column coordinates matrix element value respective matrix element; allows different selection options, example whole matrix upper triangular matrix, … getTriang(): given number elements square matrix represented three-column dataframe (obtained example pileMatrix()), filters desired elements, .e. elements upper lower triangular matrix without diagonal main mirrored direction. functions: tableToLatex(): given numeric matrix data.frame, returns basic LaTeX table write table tabular packages; rownames colnames highlighted bold.","code":""},{"path":[]},{"path":[]},{"path":"https://leonardo-bo.github.io/rgrids/index.html","id":"id_2d-grids-density-analysis","dir":"","previous_headings":"Some simple uses","what":"2d grids: density analysis","title":"Manage grids and lattices","text":"Generate random points plane Define grid contains points generated Match point grid element Count points within grid element","code":"library(rgrids)  df_points <- data.frame(     x = c(rnorm(n = 50000, mean = -2), rnorm(n = 50000, mean = 2)),      y = c(rnorm(n = 50000, mean = 1), rnorm(n = 50000, mean = -1)) ) the_grid <- makeGrid2d(     xmin = floor(min(df_points$x)), ymin = floor(min(df_points$y)),      xmax = ceiling(max(df_points$x)), ymax = ceiling(max(df_points$y)),      xcell = 50, ycell = 50, by = \"v\" ) class      : Grid2d dimensions : xcell = 50, ycell = 50, ncell = 2500 range      : xmin = -7, xmax = 7              ymin = -6, ymax = 6 by         : v, count starts from xmin, ymin (bottom-left)              and y increase faster grid_index <- getCell(the_grid, df_points) df_points$grid_index <- grid_index df_grid <- getCounts(the_grid, grid_index)"},{"path":"https://leonardo-bo.github.io/rgrids/index.html","id":"operations-on-submatrixes-and-matrix-lists","dir":"","previous_headings":"Some simple uses","what":"Operations on submatrixes and matrix lists","title":"Manage grids and lattices","text":"Given matrix Calculate average 2x2 blocks Get list 4x4 matrices list matrices obtain sum element matrix","code":"mat1 <- matrix(1:64, nrow = 8, byrow = TRUE) blockmean(mat1, 2) ##      [,1] [,2] [,3] [,4] ## [1,]  5.5  7.5  9.5 11.5 ## [2,] 21.5 23.5 25.5 27.5 ## [3,] 37.5 39.5 41.5 43.5 ## [4,] 53.5 55.5 57.5 59.5 blocklist(mat1, 4) ## $`1` ##      [,1] [,2] [,3] [,4] ## [1,]    1    2    3    4 ## [2,]    9   10   11   12 ## [3,]   17   18   19   20 ## [4,]   25   26   27   28 ##  ## $`2` ##      [,1] [,2] [,3] [,4] ## [1,]    5    6    7    8 ## [2,]   13   14   15   16 ## [3,]   21   22   23   24 ## [4,]   29   30   31   32 ##  ## $`3` ##      [,1] [,2] [,3] [,4] ## [1,]   33   34   35   36 ## [2,]   41   42   43   44 ## [3,]   49   50   51   52 ## [4,]   57   58   59   60 ##  ## $`4` ##      [,1] [,2] [,3] [,4] ## [1,]   37   38   39   40 ## [2,]   45   46   47   48 ## [3,]   53   54   55   56 ## [4,]   61   62   63   64 # first create a list of matrices starting from `mat1` and using `blocklist` list_matrix <- blocklist(mat1, 4)  sumMatrix(list_matrix) ##      [,1] [,2] [,3] [,4] ## [1,]   76   80   84   88 ## [2,]  108  112  116  120 ## [3,]  140  144  148  152 ## [4,]  172  176  180  184"},{"path":"https://leonardo-bo.github.io/rgrids/index.html","id":"operations-on-rows-and-columns-of-a-matrix","dir":"","previous_headings":"Some simple uses","what":"Operations on rows and columns of a matrix","title":"Manage grids and lattices","text":"Given matrix performance comparison apply using bench package","code":"mat2 <- matrix(1:100, ncol = 10) mat1 ##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ##  [1,]    1   11   21   31   41   51   61   71   81    91 ##  [2,]    2   12   22   32   42   52   62   72   82    92 ##  [3,]    3   13   23   33   43   53   63   73   83    93 ##  [4,]    4   14   24   34   44   54   64   74   84    94 ##  [5,]    5   15   25   35   45   55   65   75   85    95 ##  [6,]    6   16   26   36   46   56   66   76   86    96 ##  [7,]    7   17   27   37   47   57   67   77   87    97 ##  [8,]    8   18   28   38   48   58   68   78   88    98 ##  [9,]    9   19   29   39   49   59   69   79   89    99 ## [10,]   10   20   30   40   50   60   70   80   90   100 rowMax(mat1) ##    value index ## 1     91    10 ## 2     92    10 ## 3     93    10 ## 4     94    10 ## 5     95    10 ## 6     96    10 ## 7     97    10 ## 8     98    10 ## 9     99    10 ## 10   100    10  rowMin(mat1) ##    value index ## 1      1     1 ## 2      2     1 ## 3      3     1 ## 4      4     1 ## 5      5     1 ## 6      6     1 ## 7      7     1 ## 8      8     1 ## 9      9     1 ## 10    10     1  colMax(mat1) ##    value index ## 1     10    10 ## 2     20    10 ## 3     30    10 ## 4     40    10 ## 5     50    10 ## 6     60    10 ## 7     70    10 ## 8     80    10 ## 9     90    10 ## 10   100    10  colMin(mat1) ##    value index ## 1      1     1 ## 2     11     1 ## 3     21     1 ## 4     31     1 ## 5     41     1 ## 6     51     1 ## 7     61     1 ## 8     71     1 ## 9     81     1 ## 10    91     1 mat3 <- matrix(runif(500000), ncol = 500)  rowMax2 <- function(mat) {   df_rowMax <- data.frame(value = apply(mat, 1, max), index = apply(mat, 1, which.max))   return(df_rowMax) }  colMax2 <- function(mat) {   df_colMax <- data.frame(value = apply(mat, 2, max), index = apply(mat, 2, which.max))   return(df_colMax) } bench::mark(colMax(mat3), colMax2(mat3)) ## # A tibble: 2 x 6 ##   expression         min   median `itr/sec` mem_alloc `gc/sec` ##   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> ## 1 colMax(mat3)  821.88µs  887.2µs    1065.     22.3KB     2.02 ## 2 colMax2(mat3)   9.15ms   10.7ms      87.1    19.2MB    56.8 bench::mark(rowMax(mat3), rowMax2(mat3)) ## # A tibble: 2 x 6 ##   expression         min   median `itr/sec` mem_alloc `gc/sec` ##   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> ## 1 rowMax(mat2)    1.07ms   1.15ms     776.     41.8KB      0   ## 2 rowMax2(mat2)  11.75ms  13.36ms      71.8    19.3MB     92.3"},{"path":[]},{"path":"https://leonardo-bo.github.io/rgrids/index.html","id":"to-do","dir":"","previous_headings":"","what":"To do","title":"Manage grids and lattices","text":"implement first neighbors analysis matrix elements tests publishing CRAN","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blocklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs list of submatrices — blocklist","title":"Performs list of submatrices — blocklist","text":"Given matrix size block, returns list     containing submatrices made blocks.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blocklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs list of submatrices — blocklist","text":"","code":"blocklist(mat, block)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/blocklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs list of submatrices — blocklist","text":"mat numeric matrix block integer vector length 2, containing size block (rows, columns). one integer passed, block square","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blocklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs list of submatrices — blocklist","text":"list submatrices made blocks","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blocklist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs list of submatrices — blocklist","text":"","code":"mat <- matrix(1:64, nrow = 8, byrow = TRUE) mat #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40 #> [6,]   41   42   43   44   45   46   47   48 #> [7,]   49   50   51   52   53   54   55   56 #> [8,]   57   58   59   60   61   62   63   64  blocklist(mat, 4) #> $`1` #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    9   10   11   12 #> [3,]   17   18   19   20 #> [4,]   25   26   27   28 #>  #> $`2` #>      [,1] [,2] [,3] [,4] #> [1,]    5    6    7    8 #> [2,]   13   14   15   16 #> [3,]   21   22   23   24 #> [4,]   29   30   31   32 #>  #> $`3` #>      [,1] [,2] [,3] [,4] #> [1,]   33   34   35   36 #> [2,]   41   42   43   44 #> [3,]   49   50   51   52 #> [4,]   57   58   59   60 #>  #> $`4` #>      [,1] [,2] [,3] [,4] #> [1,]   37   38   39   40 #> [2,]   45   46   47   48 #> [3,]   53   54   55   56 #> [4,]   61   62   63   64 #>"},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs block max — blockmax","title":"Performs block max — blockmax","text":"Given matrix size block, returns new matrix     containing max value block.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs block max — blockmax","text":"","code":"blockmax(mat, block)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs block max — blockmax","text":"mat numeric matrix block integer vector length 2, containing size block (rows, columns). one integer passed, block square","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs block max — blockmax","text":"new reduced matrix max value block","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs block max — blockmax","text":"","code":"mat <- matrix(1:64, nrow = 8, byrow = TRUE) mat #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40 #> [6,]   41   42   43   44   45   46   47   48 #> [7,]   49   50   51   52   53   54   55   56 #> [8,]   57   58   59   60   61   62   63   64  blockmax(mat, 2) # or blockmax(mat, c(2, 2)) #>      [,1] [,2] [,3] [,4] #> [1,]   10   12   14   16 #> [2,]   26   28   30   32 #> [3,]   42   44   46   48 #> [4,]   58   60   62   64"},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs block mean — blockmean","title":"Performs block mean — blockmean","text":"Given matrix size block, returns new matrix     containing average block.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs block mean — blockmean","text":"","code":"blockmean(mat, block)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs block mean — blockmean","text":"mat numeric matrix block integer vector length 2, containing size block (rows, columns). one integer passed, block square","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs block mean — blockmean","text":"new reduced matrix mean block","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs block mean — blockmean","text":"","code":"mat <- matrix(1:64, nrow = 8, byrow = TRUE) mat #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40 #> [6,]   41   42   43   44   45   46   47   48 #> [7,]   49   50   51   52   53   54   55   56 #> [8,]   57   58   59   60   61   62   63   64  blockmean(mat, 2) # or blockmean(mat, c(2, 2)) #>      [,1] [,2] [,3] [,4] #> [1,]  5.5  7.5  9.5 11.5 #> [2,] 21.5 23.5 25.5 27.5 #> [3,] 37.5 39.5 41.5 43.5 #> [4,] 53.5 55.5 57.5 59.5"},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmin.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs block min — blockmin","title":"Performs block min — blockmin","text":"Given matrix size block, returns new matrix     containing min value block.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs block min — blockmin","text":"","code":"blockmin(mat, block)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs block min — blockmin","text":"mat numeric matrix block integer vector length 2, containing size block (rows, columns). one integer passed, block square","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs block min — blockmin","text":"new reduced matrix min value block","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/blockmin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs block min — blockmin","text":"","code":"mat <- matrix(1:64, nrow = 8, byrow = TRUE) mat #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40 #> [6,]   41   42   43   44   45   46   47   48 #> [7,]   49   50   51   52   53   54   55   56 #> [8,]   57   58   59   60   61   62   63   64  blockmin(mat, 2) # or blockmin(mat, c(2, 2)) #>      [,1] [,2] [,3] [,4] #> [1,]    1    3    5    7 #> [2,]   17   19   21   23 #> [3,]   33   35   37   39 #> [4,]   49   51   53   55"},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Find max for each column — colMax","title":"Find max for each column — colMax","text":"Given matrix, returns dataframe two column:     - first column max values column original matrix     - second column indices max values","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find max for each column — colMax","text":"","code":"colMax(mat)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find max for each column — colMax","text":"mat Matrix object","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find max for each column — colMax","text":"dataframe values indices max column","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find max for each column — colMax","text":"","code":"mat <- matrix(1:9, nrow = 3) mat #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9  colMax(mat) #>   value index #> 1     3     3 #> 2     6     3 #> 3     9     3"},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMin.html","id":null,"dir":"Reference","previous_headings":"","what":"Find min for each column — colMin","title":"Find min for each column — colMin","text":"Given matrix, returns dataframe two column:     - first column min values column original matrix     - second column indices min values","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find min for each column — colMin","text":"","code":"colMin(mat)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find min for each column — colMin","text":"mat Matrix object","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find min for each column — colMin","text":"dataframe values indices min column","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/colMin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find min for each column — colMin","text":"","code":"mat <- matrix(1:9, nrow = 3) mat #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9  colMin(mat) #>   value index #> 1     1     1 #> 2     4     1 #> 3     7     1"},{"path":"https://leonardo-bo.github.io/rgrids/reference/dblocklist.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs list of diagonal submatrices — dblocklist","title":"Performs list of diagonal submatrices — dblocklist","text":"Given matrix size block, returns list     containing diagonal submatrices made blocks.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/dblocklist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs list of diagonal submatrices — dblocklist","text":"","code":"dblocklist(mat, block)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/dblocklist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs list of diagonal submatrices — dblocklist","text":"mat numeric matrix block Integer vector length 2, containing size block (rows, columns). one integer passed, block square","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/dblocklist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs list of diagonal submatrices — dblocklist","text":"list diangonal submatrices made blocks","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/dblocklist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs list of diagonal submatrices — dblocklist","text":"","code":"mat <- matrix(1:64, nrow = 8, byrow = TRUE) mat #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] #> [1,]    1    2    3    4    5    6    7    8 #> [2,]    9   10   11   12   13   14   15   16 #> [3,]   17   18   19   20   21   22   23   24 #> [4,]   25   26   27   28   29   30   31   32 #> [5,]   33   34   35   36   37   38   39   40 #> [6,]   41   42   43   44   45   46   47   48 #> [7,]   49   50   51   52   53   54   55   56 #> [8,]   57   58   59   60   61   62   63   64  dblocklist(mat, 4) #> $`1` #>      [,1] [,2] [,3] [,4] #> [1,]    1    2    3    4 #> [2,]    9   10   11   12 #> [3,]   17   18   19   20 #> [4,]   25   26   27   28 #>  #> $`2` #>      [,1] [,2] [,3] [,4] #> [1,]   37   38   39   40 #> [2,]   45   46   47   48 #> [3,]   53   54   55   56 #> [4,]   61   62   63   64 #>"},{"path":"https://leonardo-bo.github.io/rgrids/reference/dotMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs product of matrices or vectors — dotMatrix","title":"Performs product of matrices or vectors — dotMatrix","text":"Given list matrices, returns single matrix     element (, j) product corresponding elements (, j)     matrices list.     Given list vectors, returns single vector element     product corresponding elements vectors list.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/dotMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs product of matrices or vectors — dotMatrix","text":"","code":"dotMatrix(matricesList)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/dotMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs product of matrices or vectors — dotMatrix","text":"matricesList list numeric matrices dimensions","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/dotMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs product of matrices or vectors — dotMatrix","text":"matrix element (,j) product corresponding elements (,j) matrices original list","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/dotMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs product of matrices or vectors — dotMatrix","text":"","code":"mat1 <- matrix(1:4, nrow = 2) mat2 <- matrix(5:8, nrow = 2) mat3 <- matrix(9:12, nrow = 2) list_matrix <- list(mat1, mat2, mat3) list_matrix #> [[1]] #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 #>  #> [[2]] #>      [,1] [,2] #> [1,]    5    7 #> [2,]    6    8 #>  #> [[3]] #>      [,1] [,2] #> [1,]    9   11 #> [2,]   10   12 #>   dotMatrix(list_matrix) #>      [,1] [,2] #> [1,]   45  231 #> [2,]  120  384"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getBoxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Get dataframe to boxplot — getBoxplot","title":"Get dataframe to boxplot — getBoxplot","text":"Given Grid1d class object matrix dataframe points,     returns dataframe original points supplementary column     groups y points fall vertical strip.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getBoxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get dataframe to boxplot — getBoxplot","text":"","code":"getBoxplot(grid, points)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getBoxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get dataframe to boxplot — getBoxplot","text":"grid Grid1d object, made makeGrid1d function points 2d matrix dataframe points","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getBoxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get dataframe to boxplot — getBoxplot","text":"dataframe three columns: xbp (x relative boxplot), x y (original points)","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getBoxplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get dataframe to boxplot — getBoxplot","text":"","code":"# 1. Generate random points on a plane df_points <- data.frame(   x = c(rnorm(n = 50000, mean = -2), rnorm(n = 50000, mean = 2)),   y = c(rnorm(n = 50000, mean = 1), rnorm(n = 50000, mean = -1)) )  # 2. Define a grid that contains all the points generated along x stripes <- makeGrid1d(   xmin = floor(min(df_points$x)), xmax = ceiling(max(df_points$x)), xcell = 50 )  # 3. Obtain boxplot dataframe df_boxplot <- getBoxplot(stripes, df_points)  head(df_boxplot) #>     xbp          x          y #> 1    -3 -3.0427459  2.9278899 #> 2    -3 -3.0385926  1.2209724 #> 3 -2.76 -2.8010485 -0.1967269 #> 4   0.6  0.7126192 -1.2827532 #> 5 -2.04 -2.0191760  2.4186175 #> 6 -2.52 -2.4488549  0.8187433"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCell.html","id":null,"dir":"Reference","previous_headings":"","what":"Get grid index of each point — getCell","title":"Get grid index of each point — getCell","text":"Given grid object (Grid1d, Grid2d Grid3d) matrix     dataframe points, returns index point grid.     1d grid counted min max; 2d grid counted     xmin, ymin xmax, ymax increasing x y faster according     \"\" parameter grid; 3d grid counted xmin, ymin,     zmin xmax, ymax, zmax increasing x z faster according \"\"     parameter grid.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCell.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get grid index of each point — getCell","text":"","code":"getCell(grid, points)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCell.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get grid index of each point — getCell","text":"grid Grid1d, Grid2d Grid3d object, made makeGrid* function points vector 1d Grid, matrix dataframe points 2d 3d Grid","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCell.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get grid index of each point — getCell","text":"vector -th element represents index grid cell -th point belongs","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCell.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get grid index of each point — getCell","text":"","code":"# 1. Generate random points on a plane df_points <- data.frame(   x = c(rnorm(n = 50000, mean = -2), rnorm(n = 50000, mean = 2)),   y = c(rnorm(n = 50000, mean = 1), rnorm(n = 50000, mean = -1)) )  # 2. Define a grid that contains all the points generated the_grid <- makeGrid2d(   xmin = floor(min(df_points$x)), ymin = floor(min(df_points$y)),   xmax = ceiling(max(df_points$x)), ymax = ceiling(max(df_points$y)),   xcell = 50, ycell = 50, by = \"v\" )  # 3. Match each point with a grid element grid_index <- getCell(the_grid, df_points) df_points$grid_index <- grid_index  head(df_points) #>            x         y grid_index #> 1 -2.3096891 0.7446838        829 #> 2 -1.3568348 1.4758117       1032 #> 3 -1.6323633 1.4461670        982 #> 4 -1.1225828 1.2013562       1031 #> 5 -1.0066156 1.3465082       1081 #> 6 -0.5389584 0.5234540       1178"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get point count of each cell — getCounts","title":"Get point count of each cell — getCounts","text":"Given grid object (Grid1d, Grid2d Grid3d) index     cell point grid obtained getCell(), returns dataframe     coordinates counts cell. According \"\" parameter     grid, coordinates sorted x z increasing faster.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get point count of each cell — getCounts","text":"","code":"getCounts(grid, indexCell)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get point count of each cell — getCounts","text":"grid Grid1d, Grid2d Grid3d object, made makeGrid* function indexCell vector index made getCell()","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get point count of each cell — getCounts","text":"dataframe grid coordinates count many points fall within cell grid","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get point count of each cell — getCounts","text":"","code":"# 1. Generate random points on a plane df_points <- data.frame(   x = c(rnorm(n = 50000, mean = -2), rnorm(n = 50000, mean = 2)),   y = c(rnorm(n = 50000, mean = 1), rnorm(n = 50000, mean = -1)) )  # 2. Define a grid that contains all the points generated the_grid <- makeGrid2d(   xmin = floor(min(df_points$x)), ymin = floor(min(df_points$y)),   xmax = ceiling(max(df_points$x)), ymax = ceiling(max(df_points$y)),   xcell = 50, ycell = 50, by = \"v\" )  # 3. Match each point with a grid element grid_index <- getCell(the_grid, df_points)  # 4. Count how many points there are in each element of the grid df_grid <- getCounts(the_grid, grid_index)  head(df_grid) #>       x     y counts #> 1 -7.85 -4.89      0 #> 2 -7.85 -4.67      0 #> 3 -7.85 -4.45      0 #> 4 -7.85 -4.23      0 #> 5 -7.85 -4.01      0 #> 6 -7.85 -3.79      0"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getTriang.html","id":null,"dir":"Reference","previous_headings":"","what":"Get triangular items of a grid — getTriang","title":"Get triangular items of a grid — getTriang","text":"Given number elements square grid, returns indices upper lower triangular part, without diagonal, main direction mirrored direction. item count starts bottom left proceeds incrementing x (\"h\") y (\"v\") faster.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getTriang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get triangular items of a grid — getTriang","text":"","code":"getTriang(ncell, part = \"upper\", mirror = FALSE, diag = TRUE, by = \"h\")"},{"path":"https://leonardo-bo.github.io/rgrids/reference/getTriang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get triangular items of a grid — getTriang","text":"ncell integer indicating number cells grid part character indicating part grid take. possible choices \"upper\" \"lower\" mirror boolean indicating whether take main direction (FALSE) mirrored one (TRUE). Default FALSE diag boolean indicating wheater include (TRUE) diagonal (FALSE). Default TRUE character indicating whether grid indices grow faster along x (\"h\") y (\"v\")","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getTriang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get triangular items of a grid — getTriang","text":"vector indices","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/getTriang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get triangular items of a grid — getTriang","text":"","code":"df_grid <- expand.grid(x = 1:4, y = 1:4) df_grid$index <- 1:16 df_grid #>    x y index #> 1  1 1     1 #> 2  2 1     2 #> 3  3 1     3 #> 4  4 1     4 #> 5  1 2     5 #> 6  2 2     6 #> 7  3 2     7 #> 8  4 2     8 #> 9  1 3     9 #> 10 2 3    10 #> 11 3 3    11 #> 12 4 3    12 #> 13 1 4    13 #> 14 2 4    14 #> 15 3 4    15 #> 16 4 4    16  # corresponding grid # 13 14 15 16 #  9 10 11 12 #  5  6  7  8 #  1  2  3  4  getTriang(nrow(df_grid), part = \"upper\", mirror = TRUE, diag = TRUE, by = \"h\") #>  [1]  1  5  6  9 10 11 13 14 15 16"},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid1d class — makeGrid1d","title":"Grid1d class — makeGrid1d","text":"Given extremes range number cells,     generates one-dimensional grid. Cells counted minimum     maximum (left right).","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid1d class — makeGrid1d","text":"uni-dimensional grid","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid1d.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Grid1d class — makeGrid1d","text":"xcell numeric, number cells xmin numeric, lower limit xmax numeric, upper limit","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid1d class — makeGrid1d","text":"","code":"grid1d <- makeGrid1d(xmin = -50, xmax = 50, xcell = 100) grid1d #> class        : Grid1d #> dimensions   : xcell = 100 #> range        : xmin = -50, xmax = 50  makeGrid1d() #> class        : Grid1d #> dimensions   : xcell = 10 #> range        : xmin = -5, xmax = 5"},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid2d class — makeGrid2d","title":"Grid2d class — makeGrid2d","text":"Given extremes range number cells along x     y, generates two-dimensional grid. Cells counted     minimum x y (bottom-left). can choose whether increase     x y faster.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid2d class — makeGrid2d","text":"two-dimensional grid","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid2d.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Grid2d class — makeGrid2d","text":"xcell numeric, number cells along x ycell numeric, number cells along y xmin numeric, lower limit along x xmax numeric, upper limit along x ymin numeric, lower limit along y ymax numeric, upper limit along y character, count cells increasing x (\"h\") y (\"v\") faster","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid2d class — makeGrid2d","text":"","code":"grid2d <- makeGrid2d(             xmin = -50, xmax = 50, xcell = 100,             ymin = -50, ymax = 50, ycell = 100,             by = \"v\"           ) grid2d #> class      : Grid2d #> dimensions : xcell = 100, ycell = 100, ncell = 10000 #> range      : xmin = -50, xmax = 50 #>              ymin = -50, ymax = 50 #> by         : v, count starts from xmin, ymin (bottom-left)  #>              and y increase faster  makeGrid2d() #> class      : Grid2d #> dimensions : xcell = 10, ycell = 10, ncell = 100 #> range      : xmin = -5, xmax = 5 #>              ymin = -5, ymax = 5 #> by         : h, count starts from xmin, ymin (bottom-left)  #>              and x increase faster"},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid3d class — makeGrid3d","title":"Grid3d class — makeGrid3d","text":"Given extremes range number cells along x     y z, generates three-dimensional grid. Cells counted     minimum x, y z. can choose whether increase x z faster.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid3d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid3d class — makeGrid3d","text":"three-dimensional grid","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid3d.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Grid3d class — makeGrid3d","text":"xcell numeric, number cells along x ycell numeric, number cells along y zcell numeric, number cells along z xmin numeric, lower limit along x xmax numeric, upper limit along x ymin numeric, lower limit along y ymax numeric, upper limit along y zmin numeric, lower limit along z zmax numeric, upper limit along z character, count cells increasing x (\"h\") z (\"v\") faster","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/makeGrid3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid3d class — makeGrid3d","text":"","code":"grid3d <- makeGrid3d(             xmin = -50, xmax = 50, xcell = 4,             ymin = -50, ymax = 50, ycell = 5,             zmin = -50, zmax = 50, zcell = 6,             by = \"v\"           ) grid3d #> class      : Grid3d #> dimensions : xcell = 4, ycell = 5, zcell = 6, ncell = 120 #> range      : xmin = -50, xmax = 50 #>              ymin = -50, ymax = 50 #>              zmin = -50, zmax = 50 #> by         : v, count starts from xmin, ymin, zmin;   #>              z increase faster, x slower  makeGrid3d() #> class      : Grid3d #> dimensions : xcell = 10, ycell = 10, zcell = 10, ncell = 1000 #> range      : xmin = -5, xmax = 5 #>              ymin = -5, ymax = 5 #>              zmin = -5, zmax = 5 #> by         : h, count starts from xmin, ymin, zmin;   #>              x increase faster, z slower"},{"path":"https://leonardo-bo.github.io/rgrids/reference/meanMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs mean of matrices or vectors — meanMatrix","title":"Performs mean of matrices or vectors — meanMatrix","text":"Given list matrices, returns single matrix     element (, j) average corresponding elements (, j)     matrices list.     Given list vectors, returns single vector element     average corresponding elements vectors list.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/meanMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs mean of matrices or vectors — meanMatrix","text":"","code":"meanMatrix(matricesList)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/meanMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs mean of matrices or vectors — meanMatrix","text":"matricesList list numeric matrices dimensions","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/meanMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs mean of matrices or vectors — meanMatrix","text":"matrix element (,j) average corresponding elements (,j) matrices original list","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/meanMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs mean of matrices or vectors — meanMatrix","text":"","code":"mat1 <- matrix(1:4, nrow = 2) mat2 <- matrix(5:8, nrow = 2) mat3 <- matrix(9:12, nrow = 2) list_matrix <- list(mat1, mat2, mat3) list_matrix #> [[1]] #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 #>  #> [[2]] #>      [,1] [,2] #> [1,]    5    7 #> [2,]    6    8 #>  #> [[3]] #>      [,1] [,2] #> [1,]    9   11 #> [2,]   10   12 #>   meanMatrix(list_matrix) #>      [,1] [,2] #> [1,]    5    7 #> [2,]    6    8"},{"path":"https://leonardo-bo.github.io/rgrids/reference/pileMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Trasform matrix into dataframe — pileMatrix","title":"Trasform matrix into dataframe — pileMatrix","text":"Given matrix, returns dataframe three columns, first column row index original matrix, second column column index original matrix, third column value original matrix element.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/pileMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trasform matrix into dataframe — pileMatrix","text":"","code":"pileMatrix(mat, subset = \"full\")"},{"path":"https://leonardo-bo.github.io/rgrids/reference/pileMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trasform matrix into dataframe — pileMatrix","text":"mat numeric matrix subset character indicating array elements take. possible choices : \"full\": whole matrix (default), \"u\": upper triangular matrix without diagonal, \"ud\": upper trinagular matrix diagonal, \"l\": lower triangular matrix without diagonal, \"ld\": lower triangular matrix diagonal, \"d\": diagonal","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/pileMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trasform matrix into dataframe — pileMatrix","text":"dataframe three columns: row index (row), col index (col) matrix element value (value)","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/pileMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trasform matrix into dataframe — pileMatrix","text":"","code":"mat <- matrix(1:9, nrow = 3) mat #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9  pileMatrix(mat) #>   row col value #> 1   1   1     1 #> 2   2   1     2 #> 3   3   1     3 #> 4   1   2     4 #> 5   2   2     5 #> 6   3   2     6 #> 7   1   3     7 #> 8   2   3     8 #> 9   3   3     9  pileMatrix(mat, subset = \"u\") #>   row col value #> 1   1   2     4 #> 2   1   3     7 #> 3   2   3     8"},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMax.html","id":null,"dir":"Reference","previous_headings":"","what":"Find max for each row — rowMax","title":"Find max for each row — rowMax","text":"Given matrix, returns dataframe two column:     - first column max values row original matrix     - second column indices max values","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find max for each row — rowMax","text":"","code":"rowMax(mat)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find max for each row — rowMax","text":"mat numeric matrix","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find max for each row — rowMax","text":"dataframe values indices max row","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find max for each row — rowMax","text":"","code":"mat <- matrix(1:9, nrow = 3) mat #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9  rowMax(mat) #>   value index #> 1     7     3 #> 2     8     3 #> 3     9     3"},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMin.html","id":null,"dir":"Reference","previous_headings":"","what":"Find min for each row — rowMin","title":"Find min for each row — rowMin","text":"Given matrix, returns dataframe two column:     - first column min values row original matrix     - second column indices min values","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find min for each row — rowMin","text":"","code":"rowMin(mat)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find min for each row — rowMin","text":"mat Matrix object","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find min for each row — rowMin","text":"dataframe values indices min row","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/rowMin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find min for each row — rowMin","text":"","code":"mat <- matrix(1:9, nrow = 3) mat #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9  rowMin(mat) #>   value index #> 1     1     1 #> 2     2     1 #> 3     3     1"},{"path":"https://leonardo-bo.github.io/rgrids/reference/sumMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Performs sum of matrices or vectors — sumMatrix","title":"Performs sum of matrices or vectors — sumMatrix","text":"Given list matrices, returns single matrix     element (, j) sum corresponding elements (, j)     matrices list.     Given list vectors, returns single vector element     sum corresponding elements vectors list.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/sumMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Performs sum of matrices or vectors — sumMatrix","text":"","code":"sumMatrix(matricesList)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/sumMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Performs sum of matrices or vectors — sumMatrix","text":"matricesList list numeric matrices dimensions","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/sumMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Performs sum of matrices or vectors — sumMatrix","text":"matrix element (,j) sum corresponding elements (,j) matrices original list","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/sumMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Performs sum of matrices or vectors — sumMatrix","text":"","code":"mat1 <- matrix(1:4, nrow = 2) mat2 <- matrix(5:8, nrow = 2) mat3 <- matrix(9:12, nrow = 2) list_matrix <- list(mat1, mat2, mat3) list_matrix #> [[1]] #>      [,1] [,2] #> [1,]    1    3 #> [2,]    2    4 #>  #> [[2]] #>      [,1] [,2] #> [1,]    5    7 #> [2,]    6    8 #>  #> [[3]] #>      [,1] [,2] #> [1,]    9   11 #> [2,]   10   12 #>   sumMatrix(list_matrix) #>      [,1] [,2] #> [1,]   15   21 #> [2,]   18   24"},{"path":"https://leonardo-bo.github.io/rgrids/reference/tableToLatex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R table in LaTeX table — tableToLatex","title":"Convert R table in LaTeX table — tableToLatex","text":"Given numeric matrix, data.frame, tibble data.table     returns basic LaTeX table write table tabular packages.     Rownames colnames highlighted bold.","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/tableToLatex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R table in LaTeX table — tableToLatex","text":"","code":"tableToLatex(object, digits = 3, file = FALSE, double_space = FALSE)"},{"path":"https://leonardo-bo.github.io/rgrids/reference/tableToLatex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R table in LaTeX table — tableToLatex","text":"object numeric matrix, data.frame, tibble data.table digits Number decimals. Default = 3 file TRUE write file object name work directory. Default FALSE double_space TRUE add empty columns increase space columns","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/tableToLatex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert R table in LaTeX table — tableToLatex","text":"Text terminal file copy LaTeX environment","code":""},{"path":"https://leonardo-bo.github.io/rgrids/reference/tableToLatex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert R table in LaTeX table — tableToLatex","text":"","code":"mat <- matrix(1:9, nrow = 3) mat #>      [,1] [,2] [,3] #> [1,]    1    4    7 #> [2,]    2    5    8 #> [3,]    3    6    9  tableToLatex(mat) #> \\begin{table}[htbp]  #> \\centering  #>  \\begin{tabular}{ccc}  #>  \\textbf{ V1 } & \\textbf{ V2 } & \\textbf{ V3 } \\\\  #>  1.000 & 4.000 & 7.000 \\\\  #>  2.000 & 5.000 & 8.000 \\\\  #>  3.000 & 6.000 & 9.000 \\\\  #>  \\end{tabular}  #> \\caption{}  #> \\label{}  #> \\end{table}"}]
